// Code generated by protoc-gen-cobra. DO NOT EDIT.

package pb

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	proto "github.com/golang/protobuf/proto"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	grpc "google.golang.org/grpc"
	strconv "strconv"
	strings "strings"
)

func Proto2ClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   "proto2",
		Short: "Proto2 service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_Proto2EchoCommand(cfg),
	)
	return cmd
}

func _Proto2EchoCommand(cfg *client.Config) *cobra.Command {
	req := &Sound2{}

	cmd := &cobra.Command{
		Use:   "echo",
		Short: "Echo RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), cfg.EnvVarPrefix); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), cfg.EnvVarPrefix, "PROTO2", "ECHO"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewProto2Client(cc)
				v := &Sound2{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Echo(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	flag.Float64PointerVar(cmd.PersistentFlags(), &req.Double, "double", "")
	flag.Float32PointerVar(cmd.PersistentFlags(), &req.Float, "float", "")
	flag.Int32PointerVar(cmd.PersistentFlags(), &req.Int32, "int32", "")
	flag.Int64PointerVar(cmd.PersistentFlags(), &req.Int64, "int64", "")
	flag.Uint32PointerVar(cmd.PersistentFlags(), &req.Uint32, "uint32", "")
	flag.Uint64PointerVar(cmd.PersistentFlags(), &req.Uint64, "uint64", "")
	flag.Int32PointerVar(cmd.PersistentFlags(), &req.Sint32, "sint32", "")
	flag.Int64PointerVar(cmd.PersistentFlags(), &req.Sint64, "sint64", "")
	flag.Uint32PointerVar(cmd.PersistentFlags(), &req.Fixed32, "fixed32", "")
	flag.Uint64PointerVar(cmd.PersistentFlags(), &req.Fixed64, "fixed64", "")
	flag.Int32PointerVar(cmd.PersistentFlags(), &req.Sfixed32, "sfixed32", "")
	flag.Int64PointerVar(cmd.PersistentFlags(), &req.Sfixed64, "sfixed64", "")
	flag.BoolPointerVar(cmd.PersistentFlags(), &req.Bool, "bool", "")
	flag.StringPointerVar(cmd.PersistentFlags(), &req.String_, "string_", "")
	cmd.PersistentFlags().BytesBase64Var(&req.Bytes, "bytes", nil, "")
	cmd.PersistentFlags().Float64SliceVar(&req.ListDouble, "listdouble", nil, "")
	cmd.PersistentFlags().Float32SliceVar(&req.ListFloat, "listfloat", nil, "")
	cmd.PersistentFlags().Int32SliceVar(&req.ListInt32, "listint32", nil, "")
	cmd.PersistentFlags().Int64SliceVar(&req.ListInt64, "listint64", nil, "")
	flag.Uint32SliceVar(cmd.PersistentFlags(), &req.ListUint32, "listuint32", "")
	flag.Uint64SliceVar(cmd.PersistentFlags(), &req.ListUint64, "listuint64", "")
	cmd.PersistentFlags().Int32SliceVar(&req.ListSint32, "listsint32", nil, "")
	cmd.PersistentFlags().Int64SliceVar(&req.ListSint64, "listsint64", nil, "")
	flag.Uint32SliceVar(cmd.PersistentFlags(), &req.ListFixed32, "listfixed32", "")
	flag.Uint64SliceVar(cmd.PersistentFlags(), &req.ListFixed64, "listfixed64", "")
	cmd.PersistentFlags().Int32SliceVar(&req.ListSfixed32, "listsfixed32", nil, "")
	cmd.PersistentFlags().Int64SliceVar(&req.ListSfixed64, "listsfixed64", nil, "")
	cmd.PersistentFlags().BoolSliceVar(&req.ListBool, "listbool", nil, "")
	cmd.PersistentFlags().StringSliceVar(&req.ListString, "liststring", nil, "")
	flag.BytesBase64SliceVar(cmd.PersistentFlags(), &req.ListBytes, "listbytes", "")
	cmd.PersistentFlags().StringToInt64Var(&req.MapStringInt64, "mapstringint64", nil, "")
	cmd.PersistentFlags().StringToStringVar(&req.MapStringString, "mapstringstring", nil, "")
	_Sound2_EnumPointerVar(cmd.PersistentFlags(), &req.Enum, "enum", "")
	_Sound2_EnumSliceVar(cmd.PersistentFlags(), &req.ListEnum, "listenum", "")
	flag.TimestampVar(cmd.PersistentFlags(), &req.Timestamp, "timestamp", "")
	flag.DurationVar(cmd.PersistentFlags(), &req.Duration, "duration", "")
	flag.BoolWrapperVar(cmd.PersistentFlags(), &req.WrapperBool, "wrapperbool", "")
	flag.BytesBase64WrapperVar(cmd.PersistentFlags(), &req.WrapperBytes, "wrapperbytes", "")
	flag.DoubleWrapperVar(cmd.PersistentFlags(), &req.WrapperDouble, "wrapperdouble", "")
	flag.FloatWrapperVar(cmd.PersistentFlags(), &req.WrapperFloat, "wrapperfloat", "")
	flag.Int32WrapperVar(cmd.PersistentFlags(), &req.WrapperInt32, "wrapperint32", "")
	flag.Int64WrapperVar(cmd.PersistentFlags(), &req.WrapperInt64, "wrapperint64", "")
	flag.StringWrapperVar(cmd.PersistentFlags(), &req.WrapperString, "wrapperstring", "")
	flag.UInt32WrapperVar(cmd.PersistentFlags(), &req.WrapperUint32, "wrapperuint32", "")
	flag.UInt64WrapperVar(cmd.PersistentFlags(), &req.WrapperUint64, "wrapperuint64", "")
	flag.TimestampSliceVar(cmd.PersistentFlags(), &req.ListTimestamp, "listtimestamp", "")
	flag.DurationSliceVar(cmd.PersistentFlags(), &req.ListDuration, "listduration", "")
	flag.BoolWrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperBool, "listwrapperbool", "")
	flag.BytesBase64WrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperBytes, "listwrapperbytes", "")
	flag.DoubleWrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperDouble, "listwrapperdouble", "")
	flag.FloatWrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperFloat, "listwrapperfloat", "")
	flag.Int32WrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperInt32, "listwrapperint32", "")
	flag.Int64WrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperInt64, "listwrapperint64", "")
	flag.StringWrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperString, "listwrapperstring", "")
	flag.UInt32WrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperUint32, "listwrapperuint32", "")
	flag.UInt64WrapperSliceVar(cmd.PersistentFlags(), &req.ListWrapperUint64, "listwrapperuint64", "")

	return cmd
}

type _Sound2_EnumPointerValue struct {
	set func(*Sound2_Enum)
}

func _Sound2_EnumPointerVar(fs *pflag.FlagSet, p **Sound2_Enum, name, usage string) *_Sound2_EnumPointerValue {
	return &_Sound2_EnumPointerValue{func(e *Sound2_Enum) { *p = e }}
}

func (v *_Sound2_EnumPointerValue) Set(val string) error {
	if e, err := parseSound2_Enum(val); err != nil {
		return err
	} else {
		v.set(&e)
		return nil
	}
}

func (v *_Sound2_EnumPointerValue) Type() string { return "Sound2_Enum" }

func (v *_Sound2_EnumPointerValue) String() string { return "<nil>" }

type _Sound2_EnumSliceValue struct {
	value   *[]Sound2_Enum
	changed bool
}

func _Sound2_EnumSliceVar(fs *pflag.FlagSet, p *[]Sound2_Enum, name, usage string) {
	fs.Var(&_Sound2_EnumSliceValue{value: p}, name, usage)
}

func (s *_Sound2_EnumSliceValue) Set(val string) error {
	ss := strings.Split(val, ",")
	out := make([]Sound2_Enum, len(ss))
	for i, s := range ss {
		var err error
		if out[i], err = parseSound2_Enum(s); err != nil {
			return err
		}
	}
	if !s.changed {
		*s.value = out
		s.changed = true
	} else {
		*s.value = append(*s.value, out...)
	}
	return nil
}

func (s *_Sound2_EnumSliceValue) Type() string { return "Sound2_EnumSlice" }

func (s *_Sound2_EnumSliceValue) String() string { return "[]" }

func parseSound2_Enum(s string) (Sound2_Enum, error) {
	if i, ok := Sound2_Enum_value[s]; ok {
		return Sound2_Enum(i), nil
	} else if i, err := strconv.ParseInt(s, 0, 32); err == nil {
		return Sound2_Enum(i), nil
	} else {
		return 0, err
	}
}
